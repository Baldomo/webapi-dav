all:
  desc: Compila il progetto per tutte le piattaforme, x64
  deps:
    - task: windows
      vars: {SUFFIX: .exe}
    - task: linux
      vars: {SUFFIX: ""}
    - task: darwin
      vars: {SUFFIX: ""}

fcgi:
  desc: Compila il progetto per compatibilit√† con FastCGI
  deps:
    - task: windows
      vars: {SUFFIX: .fcgi}
    - task: linux
      vars: {SUFFIX: .fcgi}
    - task: darwin
      vars: {SUFFIX: .fcgi}

windows:
  desc: Compila il progetto per Windows x64
  vars:
    SUFFIX: .exe
  cmds:
    - echo "Compilo webapi-dav-windows_amd64{{ .SUFFIX }}"
    - env GOOS=windows GOARCH=amd64 go build -ldflags="-s -w" -o {{fromSlash "build/webapi-dav-windows_amd64"}}{{ .SUFFIX }}
  silent: true

linux:
  desc: Compila il progetto per Linux x64
  vars:
    SUFFIX: ""
  cmds:
    - echo "Compilo webapi-dav-linux_amd64{{ .SUFFIX }}"
    - env GOOS=linux GOARCH=amd64 go build -ldflags="-s -w" -o {{fromSlash "build/webapi-dav-linux_amd64"}}{{ .SUFFIX }}
  silent: true

darwin:
  desc: Compila il progetto per macOS x64
  vars:
    SUFFIX: ""
  cmds:
    - echo "Compilo webapi-dav-mac_amd64{{ .SUFFIX }}"
    - env GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -o {{fromSlash "build/webapi-dav-mac_amd64"}}{{ .SUFFIX }}
  silent: true

raspberry:
  desc: Compila il progetto per linux arm
  vars:
    SUFFIX: ""
  cmds:
    - echo "Compilo webapi-dav-linux_arm64{{ .SUFFIX }}"
    - env GOOS=linux GOARCH=arm64 go build -ldflags="-s -w" -o {{fromSlash "build/webapi-dav-linux_arm64"}}{{ .SUFFIX }}
  silent: true

init-playground:
  deps: [linux]
  desc: |
    Crea un playground dove testare il programma:
      - playground/
        - comunicati-docenti/
        - comunicati-genitori/
        - comunicati-studenti/
        - config.toml
        - Eseguibile "webapi-dav-..."
  cmds:
    - rm -rf playground
    - echo "Creazione playground..."
    - mkdir playground
    - cp config.toml playground
    - cp {{fromSlash "build/webapi-dav-*"}} playground
    - cp -r static playground
    - cp file_generator.py playground
    - cp id_rsa.nodes playground
    - cp server.crt playground
  silent: true

deploy-test:
  desc: Inizia il testing dopo aver creato il playground
  deps: [init-playground]
  dir: playground
  cmds:
    - echo "Creazione file di prova..."
    - python3 file_generator.py -n 85 -d comunicati-docenti -d comunicati-genitori -d comunicati-studenti
    - echo -e "Avvio server\n"
    - ./webapi-dav-{{OS}}_amd64{{exeExt}}
  silent: true

go-test:
  desc: Deploy minimale e go test
  cmds:
    - rm -rf playground
    - echo "Creazione playground..."
    - mkdir playground
    - cp config.toml playground
    - cp -r static playground
    - cp file_generator.py playground
    - echo "Creazione file di prova..."
    - python3 file_generator.py -n 85 -d playground/comunicati-docenti -d playground/comunicati-genitori -d playground/comunicati-studenti
    - cp *.go playground
    - cd playground && go test -v -benchmem
  silent: true

pack:
  desc: Usa UPX per comprimere gli eseguibili
  dir: build
  cmds:
    - upx --brute webapi-*
  silent: true

clean:
  desc: Rimuove gli eseguibili prodotti nella cartella /build e il playground
  cmds:
    - rm -rf {{fromSlash "build/webapi-dav-*"}}
    - rm -rf playground
  silent: true